names(sampleGenes)
# Test bedtools intersect.
# Specify paths for files needed for the analysis.
path_to_significant_DEGs <- "Wheat-analysis/Data/Significant DEGs/"
path_to_all_DEGs <- "Wheat-analysis/Data/All DEGs/"
path_to_gene_list <- "Wheat-analysis/Data/Wheat protein coding genes.csv"
path_to_data_output <- "Wheat-analysis/Data/Enrichment results/"
# If not existing, create folders for the different data outputs of the enrichment analysis.
for (folder in c("All frequencies", "All proportions", "Average proportions")) {
if (file.exists(paste(path_to_data_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_data_output, folder, sep = "")))
} else next
}
path_to_graph_output <- "Wheat-analysis/Graphs/"
# If not existing, create folders for the graphical outputs of the enrichment analysis.
for (folder in c("Enrichment per region", "Percent modified genes")) {
if (file.exists(paste(path_to_graph_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_graph_output, folder, sep = "")))
} else next
}
rm(folder)
# Load required functions.
source("Wheat-analysis/Functions/getGeneCoordinates.R")
names(sampleGenes)
sampleGenes <- list()
for (file in list.files(path_to_significant_DEGs)) {
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory upreg".
sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]] <- as.data.frame(read.csv(paste(path_to_significant_DEGs, file, sep = "")))
colnames(sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]]) <- c("Gene", "seqnames")
}
# Import control gene sets from 'All DEGs' folder. Add to the list.
for (file in list.files(path_to_all_DEGs)) {
df <- as.data.frame(read.csv(paste(path_to_all_DEGs, file, sep = "")))
# Remove genes not assigned to a chromosome.
df <- data.frame(Gene = df[-which(str_match(df$Gene, "^TraesCS(U)02G[0-9]+$")[,2]=="U"),])
# Extract the chromosome from the gene name and create a 'seqnames' column.
df$seqnames <- str_match(df$Gene, "^TraesCS([0-9]+[a-zA-Z]+)02G[0-9]+$")[,2]
# Sample 10000 random control genes from the unfiltered list of DEGs.
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory control".
sampleGenes[[paste(str_match(file, "^([a-zA-Z]+.*) vs [a-zA-Z]+.*.csv$")[,2], "control", sep = " ")]] <- df[sample(1:nrow(df), 10000),]
}
names(sampleGenes)
list.files(path_to_significant_DEGs)
library(rtracklayer)
bed1 <- import.bed("Data/Asory misregulated.bed")
bed1 <- import.bed("Data/Bed files/Asory misregulated.bed")
head(bed1)
bed12 <- import.bed("Data/Bed files/Savannah misregulated.bed")
overlap <- bt.intersect(bed1, bed12, wo = TRUE)
library(bedtoolsr)
overlap <- bt.intersect(bed1, bed12, wo = TRUE)
head(overlap)
which((str_match(bed1$ranges, "^[0-9]+-([0-9])+$")[,2]-str_match(bed1$ranges, "^([0-9])+-[0-9]+$")[,2]) < 0)
library(stringr)
which((str_match(bed1$ranges, "^[0-9]+-([0-9])+$")[,2]-str_match(bed1$ranges, "^([0-9])+-[0-9]+$")[,2]) < 0)
head(str_match(bed1$ranges, "^[0-9]+-([0-9])+$")[,2])
head(bed1$ranges)
names(bed1)
bed1_df <- as.data.frame(bed1)
head(str_match(bed1_df$ranges, "^[0-9]+-([0-9])+$")[,2])
names(bed1_df)
which((bed1_df$end-bed1_df$start) < 0)
head(nextflowOutputBed)
geneSet
geneSet <- "Asory downreg"
mod <- "H3K4me3"
region <- "Gene20"
df <- sampleGenes[[geneSet]]
head(df)
sampleGenes <- list()
for (file in list.files(path_to_significant_DEGs)) {
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory upreg".
sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]] <- as.data.frame(read.csv(paste(path_to_significant_DEGs, file, sep = "")))
colnames(sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]]) <- c("Gene", "seqnames")
}
# Import control gene sets from 'All DEGs' folder. Add to the list.
for (file in list.files(path_to_all_DEGs)) {
df <- as.data.frame(read.csv(paste(path_to_all_DEGs, file, sep = "")))
# Remove genes not assigned to a chromosome.
df <- data.frame(Gene = df[-which(str_match(df$Gene, "^TraesCS(U)02G[0-9]+$")[,2]=="U"),])
# Extract the chromosome from the gene name and create a 'seqnames' column.
df$seqnames <- str_match(df$Gene, "^TraesCS([0-9]+[a-zA-Z]+)02G[0-9]+$")[,2]
# Sample 10000 random control genes from the unfiltered list of DEGs.
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory control".
sampleGenes[[paste(str_match(file, "^([a-zA-Z]+.*) vs [a-zA-Z]+.*.csv$")[,2], "control", sep = " ")]] <- df[sample(1:nrow(df), 10000),]
}
rm (file, df)
# Import list of all protein coding genes.
genomeData <- as.data.frame(read.csv(path_to_gene_list))
geneSet <- "Asory downreg"
mod <- "H3K4me3"
region <- "Gene20"
df <- sampleGenes[[geneSet]]
head(df)
path_to_significant_DEGs <- "Data/Significant DEGs/"
path_to_all_DEGs <- "Data/All DEGs/"
path_to_gene_list <- "Data/Wheat protein coding genes.csv"
path_to_data_output <- "Data/Enrichment results/"
# If not existing, create folders for the different data outputs of the enrichment analysis.
for (folder in c("All frequencies", "All proportions", "Average proportions")) {
if (file.exists(paste(path_to_data_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_data_output, folder, sep = "")))
} else next
}
path_to_graph_output <- "Wheat-analysis/Graphs/"
# If not existing, create folders for the graphical outputs of the enrichment analysis.
for (folder in c("Enrichment per region", "Percent modified genes")) {
if (file.exists(paste(path_to_graph_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_graph_output, folder, sep = "")))
} else next
}
rm(folder)
# Load required functions.
source("Wheat-analysis/Functions/getGeneCoordinates.R")
path_to_significant_DEGs <- "Data/Significant DEGs/"
path_to_all_DEGs <- "Data/All DEGs/"
path_to_gene_list <- "Data/Wheat protein coding genes.csv"
path_to_data_output <- "Data/Enrichment results/"
# If not existing, create folders for the different data outputs of the enrichment analysis.
for (folder in c("All frequencies", "All proportions", "Average proportions")) {
if (file.exists(paste(path_to_data_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_data_output, folder, sep = "")))
} else next
}
path_to_graph_output <- "Wheat-analysis/Graphs/"
# If not existing, create folders for the graphical outputs of the enrichment analysis.
for (folder in c("Enrichment per region", "Percent modified genes")) {
if (file.exists(paste(path_to_graph_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_graph_output, folder, sep = "")))
} else next
}
# Import ChIP-seq data using 'getChIP_seq_data.R function.
source("Wheat-analysis/Functions/getChIP_seq_data.R")
path_to_significant_DEGs <- "Data/Significant DEGs/"
path_to_all_DEGs <- "Data/All DEGs/"
path_to_gene_list <- "Data/Wheat protein coding genes.csv"
path_to_data_output <- "Data/Enrichment results/"
# If not existing, create folders for the different data outputs of the enrichment analysis.
for (folder in c("All frequencies", "All proportions", "Average proportions")) {
if (file.exists(paste(path_to_data_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_data_output, folder, sep = "")))
} else next
}
path_to_graph_output <- "Wheat-analysis/Graphs/"
# If not existing, create folders for the graphical outputs of the enrichment analysis.
for (folder in c("Enrichment per region", "Percent modified genes")) {
if (file.exists(paste(path_to_graph_output, folder, sep = ""))==FALSE) {
dir.create(file.path(paste(path_to_graph_output, folder, sep = "")))
} else next
}
tract the chromosome from the gene name and create a 'seqnames' column.
sampleGenes <- list()
for (file in list.files(path_to_significant_DEGs)) {
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory upreg".
sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]] <- as.data.frame(read.csv(paste(path_to_significant_DEGs, file, sep = "")))
colnames(sampleGenes[[str_match(file, "^([a-zA-Z]+.*).csv$")[,2]]]) <- c("Gene", "seqnames")
}
# Import control gene sets from 'All DEGs' folder. Add to the list.
for (file in list.files(path_to_all_DEGs)) {
df <- as.data.frame(read.csv(paste(path_to_all_DEGs, file, sep = "")))
# Remove genes not assigned to a chromosome.
df <- data.frame(Gene = df[-which(str_match(df$Gene, "^TraesCS(U)02G[0-9]+$")[,2]=="U"),])
# Extract the chromosome from the gene name and create a 'seqnames' column.
df$seqnames <- str_match(df$Gene, "^TraesCS([0-9]+[a-zA-Z]+)02G[0-9]+$")[,2]
# Sample 10000 random control genes from the unfiltered list of DEGs.
# Use 'str_match' function to name each dataset stored in the list e.g. "Asory control".
sampleGenes[[paste(str_match(file, "^([a-zA-Z]+.*) vs [a-zA-Z]+.*.csv$")[,2], "control", sep = " ")]] <- df[sample(1:nrow(df), 10000),]
}
rm (file, df)
# Import list of all protein coding genes.
genomeData <- as.data.frame(read.csv(path_to_gene_list))
genomeData <- genomeData[,-1]
# Perform enrichment analysis on each gene set.
geneSet <- "Asory downreg"
mod <- "H3K4me3"
region <- "Gene20"
df <- sampleGenes[[geneSet]]
head(df)
geneRegions <- getGeneCoordinates(df, genomeData)
source("Functions/getGeneCoordinates.R")
geneRegions <- getGeneCoordinates(df, genomeData)
queryBed <- GRanges(geneRegions[[region]][,c("Gene","seqnames","start","end","width")])
head(queryBed)
head( bt.sort(queryBed))
1144653  -1144333
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
head(queryBed)
head(sort(queryBed))
head(queryBed[sort(queryBed),])
head(queryBed[order(queryBed),])
head(queryBed[order(queryBed$seqnames),])
head(queryBed[order(queryBed$seqnames, queryBed$start),])
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
queryBed <- queryBed[order(queryBed$seqnames),]
queryBed <- queryBed[order(queryBed$start),]
queryBed <- GRanges(queryBed)
head(queryBed)
head(queryBed)
# Import ChIP-seq data using 'getChIP_seq_data.R function.
source("Functions/getChIP_seq_data.R")
nextflowOutput <- getChIP_seq_data()
write.csv(nextflowOutput, "Data/Nextflow output summary.csv")
head(nextflowOutput)
head(nextflowOutput[order(nextflowOutput$seqnames, nextflowOutput$start),])
nextflowOutput <- nextflowOutput[order(nextflowOutput$seqnames, nextflowOutput$start),]
head(GRanges(nextflowOutput[,c(1:3,8)]))
head(queryBed)
q <- as.data.frame(queryBed)
head(q)
q[which(q$seqnames=="1A" & q$start==10049835),]
nextflowOutputBed <- GRanges(nextflowOutput[,c(1:3,8)])
head(nextflowOutputBed)
q <- as.data.frame(nextflowOutputBed)
head(q)
q[which(q$seqnames=="1A" & q$start==10049835),]
q <- as.data.frame(queryBed)
q[q$Gene=="TraesCS1A02G020300",]
which(q$Gene=="TraesCS1A02G020300")
head(q)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
head(queryBed)
head(queryBed[order(queryBed$seqnames, queryBed$start, queryBed$end),])
head(queryBed[order(queryBed$Gene),])
head(nextflowOutputBed)
which(q$Gene=="TraesCS3D02G011400")
q[652,]
q[c(649:655),]
head(queryBed[order(queryBed$seqnames, queryBed$start),])
head(queryBed[order(queryBed$seqnames, queryBed$Gene, queryBed$start),])
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
queryBed <- queryBed[order(queryBed$seqnames, queryBed$Gene, queryBed$start),]
which(queryBed$Gene=="TraesCS3D02G011400")
q[c(1079:1085),]
queryBed[c(1079:1085),]
genomeData[genomeData$Gene=="TraesCS3D02G011400",]
genomeData[genomeData$Gene=="TraesCS3D02G011300",]
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
queryBed[c(1079:1085),]
queryBed[queryBed$Gene=="TraesCS1A02G020300",]
which(queryBed$Gene=="TraesCS1A02G020300")
head(queryBed)
head(genomeData)
head(as.table(genomeData))
head(as.table(genomeData[,c(2)]))
table(genomeData$Gene)
head(table(genomeData$Gene))
unique(str_match(genomeData, "^(TraesCS[A-Za-z0-9]+)G.*$")[,2]))
unique(str_match(genomeData, "^(TraesCS[A-Za-z0-9]+)G.*$")[,2])
unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)G.*$")[,2])
unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)02G.*$")[,2])
table(unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)02G.*$")[,2]))
peaksPerModification <- nextflowOutputBed[which(nextflowOutputBed$Mod.TF==mod),]
# Create a bed file with the coordinates for the current gemonic region.
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
queryBed <- GRanges(queryBed)
# Use bedtools intersect function to find the overlap between the genomic
# region and ChIP-seq peaks for the current modification/TF.
overlap <- bt.intersect(peaksPerModification, queryBed, wo = TRUE,
sorted = TRUE, g = table(unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)02G.*$")[,2])))
peaksPerModification <- nextflowOutputBed[which(nextflowOutputBed$Mod.TF==mod),]
# Create a bed file with the coordinates for the current gemonic region.
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
queryBed <- GRanges(queryBed)
bt.intersect(peaksPerModification, queryBed, wo = TRUE,
sorted = TRUE, g = table(unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)02G.*$")[,2])))
unique(str_match(genomeData$Gene, "^(TraesCS[A-Za-z0-9]+)02G.*$")[,2])
bt.intersect(peaksPerModification, queryBed, wo = TRUE,
sorted = TRUE, g = table(genomeData$Gene))
BiocManager::install("bedr")
install.packages("bedr")
nextflowOutput <- bedr.sort.region(nextflowOutput, check.chr = FALSE)
library(bedr)
nextflowOutput <- bedr.sort.region(nextflowOutput, check.chr = FALSE)
nextflowOutputBed <- bedr.sort.region(nextflowOutputBed, check.chr = FALSE)
head(nextflowOutputBed)
head(nextflowOutput)
colnames(nextflowOutput)[1] <- "chr"
nextflowOutputBed <- GRanges(nextflowOutput[,c(1:3,8)])
nextflowOutputBed <- bedr.sort.region(nextflowOutputBed, check.chr = FALSE)
head(nextflowOutputBed)
colnames(nextflowOutput)[1] <- "chr"
nextflowOutput <- bedr.sort.region(nextflowOutput, check.chr = FALSE)
head(nextflowOutput)
class(nextflowOutput$chr)
class(nextflowOutput$start)
nextflowOutput$chr <- as.character(nextflowOutput$chr)
nextflowOutput$start <- as.numeric(nextflowOutput$start)
nextflowOutput$end <- as.numeric(nextflowOutput$end)
nextflowOutput <- bedr.sort.region(nextflowOutput, check.chr = FALSE)
nextflowOutputBed <- GRanges(nextflowOutput[,c(1:3,8)])
head(nextflowOutputBed)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
#queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
colnames(queryBed)[1] <- "chr"
queryBed$chr <- as.character(queryBed$chr)
queryBed$start <- as.numeric(queryBed$start)
queryBed$end <- as.numeric(queryBed$end)
head(queryBed)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
#queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
colnames(queryBed)[2] <- "chr"
queryBed$chr <- as.character(queryBed$chr)
queryBed$start <- as.numeric(queryBed$start)
queryBed$end <- as.numeric(queryBed$end)
head(queryBed)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
queryBed <- GRanges(queryBed)
head(queryBed)
queryBed <- as.data.frame(chr = queryBed$chr,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed <- data.frame(chr = queryBed$chr,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
head(queryBed)
head(data.frame(chr = queryBed$seqnames,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene))
queryBed <- data.frame(chr = queryBed$seqnames,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
queryBed <- data.frame(chr = queryBed$seqnames,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
#queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
queryBed <- data.frame(chr = queryBed$seqnames,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed$chr <- as.character(queryBed$chr)
queryBed$start <- as.numeric(queryBed$start)
queryBed$end <- as.numeric(queryBed$end)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
head(queryBed)
head(nextflowOutputBed)
head(nextflowOutput)
queryBed <- geneRegions[[region]][,c("Gene","seqnames","start","end","width")]
#queryBed <- queryBed[order(queryBed$seqnames, queryBed$start, queryBed$Gene),]
queryBed <- data.frame(chr = queryBed$seqnames,
start = queryBed$start,
end = queryBed$end,
Gene = queryBed$Gene)
queryBed$chr <- as.character(queryBed$chr)
#queryBed$start <- as.numeric(queryBed$start)
#queryBed$end <- as.numeric(queryBed$end)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
queryBed$start <- as.integer(queryBed$start)
queryBed$end <- as.integer(queryBed$end)
queryBed <- bedr.sort.region(queryBed, check.chr = FALSE)
head(nextflowOutput)
